{"ast":null,"code":"import axios from \"axios\";\n\n// Base URL for your backend API\nconst BASE_URL = \"http://localhost:8080/api\"; // Backend API base URL\n\n// Create an axios instance with default settings\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\" // Set default content type\n  },\n  withCredentials: true // Allow cross-origin requests with cookies or credentials\n});\n\n// Add a request interceptor to include the Authorization header\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\n  if (token) {\n    // Attach the token to the Authorization header\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error); // Handle request error\n});\n\n// Add a response interceptor for error handling (optional)\naxiosInstance.interceptors.response.use(response => response,\n// If the response is successful, return it\nerror => {\n  // Handle errors globally, e.g., redirect to login on 401\n  if (error.response && error.response.status === 401) {\n    console.error(\"Unauthorized - You may need to log in.\");\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","BASE_URL","axiosInstance","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","console"],"sources":["C:/Users/balog/OneDrive/Desktop/Anul 4 Sem 1/Proiectarea Aplicatiilor WEB/PROIECT/shop-online/shop-online-frontend/src/services/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base URL for your backend API\r\nconst BASE_URL = \"http://localhost:8080/api\"; // Backend API base URL\r\n\r\n// Create an axios instance with default settings\r\nconst axiosInstance = axios.create({\r\n    baseURL: BASE_URL,\r\n    headers: {\r\n        \"Content-Type\": \"application/json\", // Set default content type\r\n    },\r\n    withCredentials: true, // Allow cross-origin requests with cookies or credentials\r\n});\r\n\r\n// Add a request interceptor to include the Authorization header\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\r\n        if (token) {\r\n            // Attach the token to the Authorization header\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error); // Handle request error\r\n    }\r\n);\r\n\r\n// Add a response interceptor for error handling (optional)\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response, // If the response is successful, return it\r\n    (error) => {\r\n        // Handle errors globally, e.g., redirect to login on 401\r\n        if (error.response && error.response.status === 401) {\r\n            console.error(\"Unauthorized - You may need to log in.\");\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG,2BAA2B,CAAC,CAAC;;AAE9C;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB,CAAE;EACxC,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACP;IACAD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAClC,CACJ,CAAC;;AAED;AACAb,aAAa,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAClCS,QAAQ,IAAKA,QAAQ;AAAE;AACvBH,KAAK,IAAK;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjDC,OAAO,CAACL,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}